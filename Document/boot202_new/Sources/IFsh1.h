/** ###################################################################
**     THIS BEAN MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename  : IFsh1.H
**     Project   : Project
**     Processor : MC9S12XET256MAL
**     Beantype  : IntFLASH
**     Version   : Bean 02.327, Driver 02.12, CPU db: 3.00.002
**     Compiler  : CodeWarrior HCS12X C Compiler
**     Date/Time : 2014-5-16, 16:03
**     Abstract  :
**         This bean "IntFLASH" implements an access to internal FLASH.
**         The bean support reading/writing data into FLASH, erasing of
**         selected sector.
**         The bean supports events if the write interrupt is supported.
**         The bean supports following modes of write operations:
**           - Write - writing without any test.
**           - Destructive write - sector is erased if necessary.
**           - Safe write - user event is invoked to save and resore data
**                          from the current sector.
**         The bean requires on-chip FLASH memory (not used/allocated by
**         other beans).
**     Settings  :
**         Total FLASH memory size       : 256KB
**         Number of FLASH memory blocks : 2
**         Interrupt service             : Disabled
**         Write method                  : Write
**         Wait in RAM                   : yes
**     Contents  :
**         EraseSector   - byte IFsh1_EraseSector(IFsh1_TAddress Addr);
**         SetProtection - byte IFsh1_SetProtection(bool ProtectType, byte ProtectHigh, byte ProtectLow,...
**         SetBlockFlash - byte IFsh1_SetBlockFlash(IFsh1_TDataAddress Source, IFsh1_TAddress Dest, word...
**         GetBlockFlash - byte IFsh1_GetBlockFlash(IFsh1_TAddress Source, IFsh1_TDataAddress Dest, word...
**         DataPtr2Addr  - IFsh1_TAddress IFsh1_DataPtr2Addr(void* Addr);
**         FuncPtr2Addr  - IFsh1_TAddress IFsh1_FuncPtr2Addr(void(*Addr)());
**
**     (c) Copyright UNIS, spol. s r.o. 1997-2007
**     UNIS, spol. s r.o.
**     Jundrovska 33
**     624 00 Brno
**     Czech Republic
**     http      : www.processorexpert.com
**     mail      : info@processorexpert.com
** ###################################################################*/
/* MODULE IFsh1. */


#ifndef __IFsh1
#define __IFsh1

/* MODULE IFsh1. */

#include "Cpu.h"

#pragma DATA_SEG IFsh1_DATA
#pragma CODE_SEG IFsh1_CODE


/* Flash area 0 start address (in the format used by bean methods). */
#define IFsh1_AREA_0_START              7864320UL
/* Flash area 0 size (in bytes). */
#define IFsh1_AREA_0_SIZE               131072UL
/* Flash area 0 last address (in the format used by bean methods). */
#define IFsh1_AREA_0_END                7995391UL
/* Flash area 0 sector size: minimal erasable unit (in bytes). */
#define IFsh1_AREA_0_SECTOR_SIZE        1024U
/* Flash area 1 start address (in the format used by bean methods). */
#define IFsh1_AREA_1_START              8257536UL
/* Flash area 1 size (in bytes). */
#define IFsh1_AREA_1_SIZE               131072UL
/* Flash area 1 last address (in the format used by bean methods). */
#define IFsh1_AREA_1_END                8388607UL
/* Flash area 1 sector size: minimal erasable unit (in bytes). */
#define IFsh1_AREA_1_SECTOR_SIZE        1024U
/* Number of flash memory areas. */
#define IFsh1_AREA_COUNT                2U

/* Flash area sector size valid for all areas: minimal erasable unit (in bytes). */
#define IFsh1_AREA_SECTOR_SIZE          1024U
/* Size of programming phrase, i.e. number of bytes that must be programmed at once */
#define IFsh1_PROGRAMMING_PHRASE        (8U)
/* TRUE if the bean setting allows rewrite of already programmed flash memory location (only clear those bits that in 1) without destruction of the value in surrounding addresses by sector erase. */
#define IFsh1_ALLOW_CLEAR               (FALSE)

#ifndef __BWUserType_IFsh1_TAddress
#define __BWUserType_IFsh1_TAddress
   typedef dword IFsh1_TAddress;       /* Bean type for address to the FLASH.*/
#endif
#ifndef __BWUserType_IFsh1_TDataAddress
#define __BWUserType_IFsh1_TDataAddress
  typedef byte *IFsh1_TDataAddress;    /* Bean type for data address. */
#endif

#define IFsh1_DummyData    0x10        /* This number is used as data word when erase command is invoked */

#define IFsh1_SetProtection(ProtectType,ProtectHigh,ProtectLow,Block) IFsh1_SetProtection_(ProtectType,ProtectHigh,ProtectLow)
byte IFsh1_SetProtection_(bool ProtectType,byte ProtectHigh,byte ProtectLow);
/*
** ===================================================================
**     Method      :  IFsh1_SetProtection (bean IntFLASH)
**
**     Description :
**         Method allows write to protection register. Please see
**         Flash Block User Guide.
**     Parameters  :
**         NAME            - DESCRIPTION
**         ProtectType     - Possible values: 0 or 1.
**                           Depend on CPU type. Two sense are
**                           possible.
**                           First:
**                           - 0 = whole Flash array is protected. In
**                           this case other parameters are don't
**                           care.
**                           - 1 = protection size depend on
**                           ProtectHigh and ProtectLow parameters.
**                           Second:
**                           - 0 = ProtectHigh and ProtectLow
**                           parameters define range to by protected .
**                           - 1 = ProtectHigh and ProtectLow
**                           parameters define range to by
**                           unprotected .
**         ProtectHigh     - Flash higher address
**                           range protection. Possible values:
**                           - 0 - 3 - defines range (size of range
**                           depend on CPU type) , 4 - Protection
**                           disabled
**         ProtectLow      - Flash lower address
**                           range protection. Possible values:
**                           - 0 - 3 - defines range (size of range
**                           depend on CPU type) , 4 - Protection
**                           disabled
**         Block           - Flash block number. Number of
**                           blocks depend on CPU type. If CPU has
**                           only one block, the value is don't care.
**     Returns     :
**         ---             - Error code, possible codes:
**                           - ERR_OK - OK
**                           - ERR_NOTAVAIL - Requested value not
**                           operation is not available
**                           - ERR_RANGE - Value is out of range
**                           - ERR_VALUE - Parameter of incorrect
**                           value
**                           - ERR_SPEED - This device does not work
**                           in the active speed mode
** ===================================================================
*/


void IFsh1_Init(void);
/*
** ===================================================================
**     Method      :  IFsh1_Init (bean IntFLASH)
**
**     Description :
**         Initializes the associated peripheral(s) and the bean internal 
**         variables. The method is called automatically as a part of the 
**         application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

byte IFsh1_SetBlockFlash(IFsh1_TDataAddress Source, IFsh1_TAddress Addr, word Count);
/*
** ===================================================================
**     Method      :  IFsh1_SetBlockFlash (bean IntFLASH)
**
**     Description :
**         Writes data to FLASH.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Source          - Source address of the data
**         Dest            - Destination address in FLASH
**         Count           - Count of the data fields in the
**                           smallest addressable units.
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

byte IFsh1_GetBlockFlash(IFsh1_TAddress Addr, IFsh1_TDataAddress Dest, word Count);
/*
** ===================================================================
**     Method      :  IFsh1_GetBlockFlash (bean IntFLASH)
**
**     Description :
**         Reads data from FLASH.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Source          - Source address of the data.
**         Dest            - Destination address
**         Count           - Count of the data fields in the
**                           smallest addressable units.
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

byte IFsh1_EraseSector(IFsh1_TAddress Addr);
/*
** ===================================================================
**     Method      :  IFsh1_EraseSector (bean IntFLASH)
**
**     Description :
**         Erase sector to which address Addr belongs.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Addr            - Address in FLASH.
**     Returns     :
**         ---             - Error code, possible codes:
**                           - ERR_OK - OK
**                           - ERR_NOTAVAIL - Desired program/erase
**                           operation is not available
**                           - ERR_RANGE - Address is out of range
**                           - ERR_SPEED - This device does not work
**                           in the active speed mode
** ===================================================================
*/

IFsh1_TAddress IFsh1_DataPtr2Addr(void *far _Val);
/*
** ===================================================================
**     Method      :  IFsh1_DataPtr2Addr (bean IntFLASH)
**
**     Description :
**         This method converts data pointer to format of a bean method
**         address parameter. Generally a data pointer format is
**         different from format of a method Addr parameter.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Addr            - Data pointer.
**     Returns     :
**         ---             - Address in the format used in the bean
**                           methods.
** ===================================================================
*/

IFsh1_TAddress IFsh1_FuncPtr2Addr(void(*far Addr)());
/*
** ===================================================================
**     Method      :  IFsh1_FuncPtr2Addr (bean IntFLASH)
**
**     Description :
**         This method converts function pointer to format of a bean
**         method address parameter. Generally a function pointer
**         format is different from format of a method Addr parameter.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Addr            - Function pointer.
**     Returns     :
**         ---             - Address in the format used in the bean
**                           methods.
** ===================================================================
*/


#pragma CODE_SEG DEFAULT

/* END IFsh1. */

#endif /* ifndef __IFsh1 */
/*
** ###################################################################
**
**     This file was created by UNIS Processor Expert 2.98 [03.98]
**     for the Freescale HCS12X series of microcontrollers.
**
** ###################################################################
*/
